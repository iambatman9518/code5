# -*- coding: utf-8 -*-
"""BFS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U21fQv6Jb1RdHsZPYT6LSZz0czgZbRut
"""

GRAPH = {
    'Delhi': {'Jaipur': 280, 'Agra': 210},
    'Agra': {'Delhi': 210, 'Jaipur': 240},
    'Jaipur': {'Delhi': 280, 'Agra': 240},
    'Lucknow': {'Delhi': 400},
    'Gwalior': {'Agra': 120}
}

def bestfirst(source, destination):
    straight_line = {
        'Delhi': 1400, 'Jaipur': 1200, 'Agra': 1300, 'Lucknow': 1100, 'Gwalior': 1200
    }

    from queue import PriorityQueue
    pq = PriorityQueue()
    pq.put((straight_line[source], 0, source, [source]))
    visited = {source: straight_line[source]}

    while not pq.empty():
        heuristic, cost, city, path = pq.get()
        if city == destination:
            return heuristic, cost, path
        for next_city, distance in GRAPH[city].items():
            current_cost = cost + distance
            heuristic = straight_line[next_city]
            if next_city not in visited or visited[next_city] >= heuristic:
                visited[next_city] = heuristic
                pq.put((heuristic, current_cost, next_city, path + [next_city]))

def main():
    source = input("Enter source city: ").title()
    destination = input("Enter goal city: ").title()

    if source not in GRAPH or destination not in GRAPH:
        print("ERROR: City not found.")
        return

    heuristic, cost, path = bestfirst(source, destination)
    print(f'Path: {" -> ".join(path)}')
    print(f'Cost: {cost}')

if __name__ == '__main__':
    main()

